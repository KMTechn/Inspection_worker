
===============================================================================
                        Inspection Worker 테스트 코드 전체 목록
===============================================================================

📋 프로그램 테스트 및 디버깅을 위한 특수 바코드(명령어) 목록입니다.
   바코드 스캐너로 스캔하거나 입력창에 직접 입력하여 사용할 수 있습니다.

===============================================================================
🚀 1. 자동화 테스트 시스템
===============================================================================

_RUN_AUTO_TEST_
  ┣━ 설명: 전체 시스템 자동 테스트 실행
  ┣━ 포함 기능:
  ┃   ┣━ 마스터 라벨 생성 및 검사 세션 시뮬레이션
  ┃   ┣━ 양품/불량품 바코드 스캔 시뮬레이션
  ┃   ┣━ F12 페달 불량 모드 시뮬레이션
  ┃   ┣━ 트레이 완료 및 라벨 생성 테스트
  ┃   ┣━ 리워크 처리 테스트
  ┃   ┣━ 잔재 생성 세션 테스트
  ┃   ┗━ 불량품 통합 모드 테스트 (NEW!)
  ┗━ 테스트 파라미터:
      ┣━ 양품 수량: 기본 5개
      ┣━ 불량품 수량: 기본 2개
      ┣━ 팰릿 수량: 기본 1개
      ┣━ 리워크 수량: 기본 1개
      ┣━ 잔재 수량: 기본 3개
      ┗━ 불량품 통합 수량: 기본 5개

===============================================================================
🔧 2. 불량 모드 테스트 시스템
===============================================================================

_TEST_DEFECT_MODE_
  ┣━ 설명: 불량 모드 전용 테스트
  ┣━ 시뮬레이션 내용:
  ┃   ┣━ F12 페달 불량 모드 활성화
  ┃   ┣━ 불량품 바코드 스캔 처리
  ┃   ┣━ 불량 사유 분류 (damaged, scratched, incomplete 등)
  ┃   ┗━ 불량률 통계 계산
  ┗━ 테스트 시나리오:
      ┣━ 마스터 라벨 없이 불량품 스캔 (오류 처리)
      ┣━ 중복 바코드 스캔 (중복 방지)
      ┗━ 잘못된 바코드 형식 (유효성 검증)

_TEST_DEFECT_MERGE_
  ┣━ 설명: 불량품 통합 모드 테스트
  ┣━ 시뮬레이션 내용:
  ┃   ┣━ 불량품 통합 세션 시작
  ┃   ┣━ 목표 수량 설정 (기본 48개)
  ┃   ┣━ 불량품 바코드 연속 스캔
  ┃   ┣━ 목표 달성 시 자동 불량표 생성
  ┃   ┗━ 불량표 이미지 및 JSON 데이터 생성
  ┗━ 생성 파일:
      ┣━ 불량표 이미지: labels/불량표_DEFECT-ID.png
      ┗━ 불량표 데이터: defects_data/YYYYMMDD/DEFECT-ID.json

===============================================================================
📊 3. 데이터 생성 테스트
===============================================================================

_CREATE_DEFECTS_[품목코드]_[수량]_
  ┣━ 설명: 테스트용 불량 데이터 생성
  ┣━ 사용법: _CREATE_DEFECTS_ITEM001_10_
  ┣━ 생성 내용:
  ┃   ┣━ 지정된 품목의 불량품 데이터
  ┃   ┣━ 무작위 불량 사유 할당
  ┃   ┗━ 타임스탬프 포함 바코드 생성
  ┗━ 결과: 불량 현황 트리뷰에 반영

TEST_LOG_[수량]
  ┣━ 설명: 테스트용 검사 기록 대량 생성 (양품+불량품 혼합)
  ┣━ 사용법: TEST_LOG_100
  ┗━ 생성 비율: 양품 80%, 불량품 20%

TEST_LOG_[수량]_GOOD
  ┣━ 설명: 테스트용 양품 검사 기록만 생성
  ┣━ 사용법: TEST_LOG_60_GOOD
  ┗━ 생성 내용: 지정 수량의 양품 기록만

===============================================================================
🎯 4. 단위 테스트 실행
===============================================================================

_RUN_UNIT_TESTS_
  ┣━ 설명: Python unittest 프레임워크 실행
  ┣━ 실행 파일: tests/run_tests.py
  ┣━ 테스트 모듈 (총 44개 테스트):
  ┃   ┣━ test_config.py (4개) - 설정 관리 테스트
  ┃   ┣━ test_models.py (10개) - 데이터 모델 테스트
  ┃   ┣━ test_file_handler.py (8개) - 파일 처리 테스트
  ┃   ┣━ test_defect_mode.py (12개) - 불량 모드 테스트
  ┃   ┗━ test_integration.py (10개) - 통합 테스트
  ┗━ 실행 결과: 콘솔에 상세 테스트 결과 출력

_RUN_TESTS_[모듈명]_
  ┣━ 설명: 특정 테스트 모듈만 실행
  ┣━ 사용법:
  ┃   ┣━ _RUN_TESTS_config_ (설정 테스트)
  ┃   ┣━ _RUN_TESTS_models_ (모델 테스트)
  ┃   ┣━ _RUN_TESTS_defect_ (불량 모드 테스트)
  ┃   ┗━ _RUN_TESTS_integration_ (통합 테스트)
  ┗━ 장점: 특정 기능 테스트만 빠르게 실행

===============================================================================
🎨 5. UI/UX 테스트
===============================================================================

_TEST_UI_RESPONSIVE_
  ┣━ 설명: UI 반응성 및 스케일링 테스트
  ┣━ 테스트 내용:
  ┃   ┣━ 다양한 해상도에서 UI 레이아웃 확인
  ┃   ┣━ 스케일 팩터 적용 테스트
  ┃   ┣━ 트리뷰 컬럼 자동 조정 테스트
  ┃   ┗━ 버튼 및 입력창 접근성 테스트
  ┗━ 결과: UI 요소들의 크기 및 배치 자동 조정

_TEST_SOUND_SYSTEM_
  ┣━ 설명: 사운드 시스템 테스트
  ┣━ 테스트 음성:
  ┃   ┣━ 성공 사운드 (success.wav)
  ┃   ┣━ 오류 사운드 (error.wav)
  ┃   ┗━ 경고 사운드 (warning.wav)
  ┗━ 설정: config.json의 sound_enabled로 제어

===============================================================================
🔄 6. 세션 및 상태 테스트
===============================================================================

_RESET_SESSION_
  ┣━ 설명: 현재 검사 세션 초기화
  ┣━ 초기화 내용:
  ┃   ┣━ 현재 검사 세션 데이터 삭제
  ┃   ┣━ 스캔된 바코드 목록 초기화
  ┃   ┣━ 진행률 및 카운터 리셋
  ┃   ┗━ UI 상태 초기화
  ┗━ 주의: 저장되지 않은 데이터는 손실됨

_SIMULATE_NETWORK_ERROR_
  ┣━ 설명: 네트워크 오류 상황 시뮬레이션
  ┣━ 테스트 시나리오:
  ┃   ┣━ GitHub 업데이트 확인 실패
  ┃   ┣━ 파일 다운로드 중단
  ┃   ┗━ 연결 타임아웃 처리
  ┗━ 오류 처리: 적절한 오류 메시지 및 복구 절차

===============================================================================
📁 7. 파일 시스템 테스트
===============================================================================

_TEST_FILE_OPERATIONS_
  ┣━ 설명: 파일 생성/읽기/쓰기 테스트
  ┣━ 테스트 파일:
  ┃   ┣━ CSV 로그 파일 읽기/쓰기
  ┃   ┣━ JSON 설정 파일 처리
  ┃   ┣━ 이미지 라벨 생성
  ┃   ┗━ 임시 파일 생성 및 정리
  ┗━ 검증: 파일 무결성 및 권한 확인

_CLEANUP_TEST_DATA_
  ┣━ 설명: 테스트로 생성된 임시 데이터 정리
  ┣━ 정리 대상:
  ┃   ┣━ TEST-로 시작하는 임시 파일
  ┃   ┣━ 테스트용 라벨 이미지
  ┃   ┣━ 임시 로그 파일
  ┃   ┗━ 테스트 세션 데이터
  ┗━ 실행 후: 시스템이 초기 상태로 복원됨

===============================================================================
⚙️ 8. 성능 및 부하 테스트
===============================================================================

_STRESS_TEST_BARCODE_
  ┣━ 설명: 바코드 스캔 성능 테스트
  ┣━ 테스트 내용:
  ┃   ┣━ 초당 최대 스캔 처리 수 측정
  ┃   ┣━ 메모리 사용량 모니터링
  ┃   ┣━ UI 반응성 유지 확인
  ┃   ┗━ 중복 스캔 처리 성능
  ┗━ 결과: 성능 지표 및 병목 구간 식별

_MEMORY_LEAK_TEST_
  ┣━ 설명: 메모리 누수 검사
  ┣━ 테스트 시나리오:
  ┃   ┣━ 장시간 운영 시뮬레이션
  ┃   ┣━ 반복적인 세션 생성/삭제
  ┃   ┣━ 이미지 파일 로드/언로드
  ┃   ┗━ 메모리 사용량 추적
  ┗━ 모니터링: 실시간 메모리 사용량 표시

===============================================================================
🔐 9. 보안 및 검증 테스트
===============================================================================

_SECURITY_VALIDATION_TEST_
  ┣━ 설명: 보안 취약점 검사
  ┣━ 검사 항목:
  ┃   ┣━ SQL 인젝션 방지 (CSV 파일 처리)
  ┃   ┣━ 경로 순회 공격 방지 (파일 경로 검증)
  ┃   ┣━ 입력 데이터 무결성 검증
  ┃   ┗━ 배치 파일 실행 보안 (shlex.quote 적용)
  ┗━ 결과: 보안 점검 보고서 생성

_INPUT_VALIDATION_TEST_
  ┣━ 설명: 입력 데이터 유효성 검사
  ┣━ 검증 대상:
  ┃   ┣━ 바코드 형식 (길이, 문자 유형)
  ┃   ┣━ 품목 코드 유효성
  ┃   ┣━ 수량 범위 검증
  ┃   ┗━ 특수 문자 필터링
  ┗━ 오류 처리: 부적절한 입력에 대한 안전한 처리

===============================================================================
📈 10. 통계 및 리포팅 테스트
===============================================================================

_GENERATE_TEST_REPORT_
  ┣━ 설명: 테스트 결과 종합 보고서 생성
  ┣━ 보고서 내용:
  ┃   ┣━ 전체 테스트 실행 결과 요약
  ┃   ┣━ 기능별 성공/실패 통계
  ┃   ┣━ 성능 지표 및 벤치마크
  ┃   ┣━ 발견된 이슈 및 권장사항
  ┃   ┗━ 시스템 건강성 점수
  ┗━ 출력: HTML 형식의 상세 보고서

_EXPORT_TEST_METRICS_
  ┣━ 설명: 테스트 메트릭 데이터 내보내기
  ┣━ 내보내기 형식:
  ┃   ┣━ CSV: 스프레드시트 분석용
  ┃   ┣━ JSON: 자동화 도구 연동용
  ┃   ┗━ XML: 외부 시스템 통합용
  ┗━ 활용: 지속적 통합(CI) 및 품질 관리

===============================================================================
🎯 테스트 실행 가이드
===============================================================================

1. 🚀 기본 테스트 시작:
   _RUN_AUTO_TEST_ → 자동 테스트 대화상자에서 파라미터 설정 → 실행

2. 🔧 불량 모드 집중 테스트:
   _TEST_DEFECT_MODE_ → _TEST_DEFECT_MERGE_ → 결과 확인

3. 📊 단위 테스트 실행:
   _RUN_UNIT_TESTS_ → 모든 44개 테스트 자동 실행

4. 🎨 UI 테스트:
   _TEST_UI_RESPONSIVE_ → _TEST_SOUND_SYSTEM_ → 사용자 경험 확인

5. 🔄 종합 검증:
   _SECURITY_VALIDATION_TEST_ → _GENERATE_TEST_REPORT_ → 최종 검토

===============================================================================
📝 주의사항
===============================================================================

• 테스트 실행 전 중요한 데이터를 백업하세요
• _CLEANUP_TEST_DATA_ 명령어로 테스트 후 정리를 권장합니다
• 일부 테스트는 관리자 권한이 필요할 수 있습니다
• 네트워크 관련 테스트는 방화벽 설정을 확인하세요
• 성능 테스트는 다른 프로그램 종료 후 실행을 권장합니다

===============================================================================
